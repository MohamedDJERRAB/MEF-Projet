load "gmsh";
mesh Th=gmshload("../fichierGMSH/sous_marin.msh");
plot(Th, wait= true, cmm = "Mon superbe maillage");



fespace Vh(Th, P1);
Vh<complex> uh,vh;

real k = 10;
real alpha = 0;
func uinc=exp(k*1i*(x*cos(alpha) + y*sin(alpha)));


real cpu=clock();


// Formulation variationnelle de Helmholtz 


solve Solutionhelmholtz(uh,vh) = -int2d(Th)(dx(uh)*dx(vh)) -int2d(Th)(dy(uh)*dy(vh))+ int2d(Th)(k*k*(uh)*(vh)) + on (3,uh=-uinc) - int1d(Th,2)(1i*k*uh*vh);

cout<<"CPU time="<<clock()-cpu<<endl;

{ 
  ofstream fout2("u.txt") ;
  fout2 << uh[] << endl ;
} 



// Pour obtenir les parties rÃ©elles, valeur absolue :
Vh<complex> uabs = abs(uh + uinc);
Vh<complex> ure = real(uh);
Vh<complex> uim = imag(uh);


real[int] colorhsv=[4./6.,1, 0.5, 4./6.,1,  1, 5./6.,1 , 1, 1, 1. , 1, 1, 0.5 , 1];

plot(uh,wait = true, cmm = "Solution complet", value = true, fill = true, hsv=colorhsv);
plot(ure,wait = true, cmm = "Solution relle", value = true, fill = true, hsv=colorhsv);
plot(uim,wait = true, cmm = "Solution imaginaire", value = true, fill = true, hsv=colorhsv);



//Exporter en GMSH (avec gmshExport.idp)
include "gmshExport.idp";
gmshExport(Th, uh[], "uh.pos");
gmshExport(Th, ure[], "ure.pos");
gmshExport(Th, uabs[], "uabs.pos");
